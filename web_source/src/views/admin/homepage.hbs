{{!-- <div class="d-inline-block w-50 h-100">
    <p>User recently accessing</p>
    <table class="table">
    <tbody>
        <tr>
        <td>img</td>
        <td>Nguyen Van A</td>
        <td>06/10/2023</td>
        </tr>
        <tr>
        <td>img</td>
        <td>Nguyen Van A</td>
        <td>04/10/2023</td>
        </tr>
        <tr>
        <td>img</td>
        <td>Nguyen Van A</td>
        <td>24/09/2023</td>
        </tr>
    </tbody>
    </table>
</div>
<div class="d-inline-block w-50 h-100">
    <div class="" style="height: 30%;">

    </div>
</div> --}}
<div class="row h-100">
    <div class="col-sm-6 px-5 py-5">
        <div class="my-3 d-flex">
            <div class="d-inline-block w-50">
                <p class="m-0 fs-5">Users recently accessing </p>
            </div>
            <div class="d-inline-block w-50">
                <div style="text-align: right;"><a href="/admin/user-list/check-user-list">
                    <button type="button" class="btn btn-light btn-outline-dark fs-6">View All ></button>
                    </a>
                </div>
            </div>
        </div>
        <ul class="list-group" id="user-list-table">
            
        </ul>
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-end" id="pagination"></ul>
        </nav>
    </div>
    <div class="col-sm-6 px-5 d-flex flex-column justify-content-center align-items-center">
        <div class="w-75 py-4" style="
            height: 250px;
            background-color: #E6E0E9; 
            border-radius:5px; 
            box-shadow: 0px 1.2080078125px 3.6240234375px 0px #0000004D;
        ">
            <div class="px-2" style="
                width: fit-content;
                background-color: #E6E0E9; 
                border-radius:5px; 
                box-shadow: 0px 1.2080078125px 3.6240234375px 0px #0000004D;
                margin: auto;
            ">
                <p class="fs-5">Welcome back, {{user.firstName}} {{user.lastName}}</p>
            </div>
            <div>
                <p class="fs-4 text-center" style="color: #808080">
                    <img src="" alt="Avatar" onerror="this.src='/img/img_avatar_male.png';" style="border-radius: 50%; max-height:120px; vertical-align: middle">
                    Admin ID: {{user.username}}
                </p>
            </div>
        </div>
    </div>
</div>
<script>
    
    var userData = `{{{ user_list }}}`;
    userData = JSON.parse(userData);

    const itemsPerPage = 5; // Number of items per page
    let currentPage = 1; // Current page
    const totalPages = Math.ceil(userData.length / itemsPerPage);

    // Function to display table data based on current page
    function displayData(page) {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const pageData = userData.slice(startIndex, endIndex);

        const tbody = document.querySelector('#user-list-table');
        tbody.innerHTML = '';

        pageData.forEach(user => {
            const row = `<li class="list-group-item">
                            {{!-- <img src="" alt="Avatar" onerror="this.src='/img/img_avatar_male.png';" style="border-radius: 50%; max-height:35px;"> --}}
                            <div class="container" style="display: flex; justify-content: space-between; align-items: center;">
                                <img src="" alt="Avatar" onerror="this.src='/img/img_avatar_male.png';" style="border-radius: 50%; max-height:35px; margin-right: 20px;">
                                <div class="left-side" style="display: flex; flex-direction: column;">
                                    <div>${user.firstName} ${user.lastName}</div>
                                    <div>ID: ${user.username}</div>
                                </div>
                                <div class="right-side" style="text-align: right; margin-left: auto;">
                                    <div>${user.lastAccess}</div>
                                </div>
                            </div>
                        </li>`;
            tbody.innerHTML += row;
        });
    }

    // Function to generate pagination links with numbered ellipsis
    function generatePagination() {
        const pagination = document.querySelector('#pagination');
        pagination.innerHTML = '';

        const maxPagesToShow = 2; // Maximum number of page links to display

        // Calculate start and end page numbers for display
        let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
        let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

        // Adjust startPage and endPage if the current page is near the beginning or end
        if (endPage - startPage + 1 < maxPagesToShow) {
            startPage = Math.max(1, endPage - maxPagesToShow + 1);
        }

        // Add "Previous" button
        if (currentPage > 1) {
            const prevLi = document.createElement('li');
            prevLi.classList.add('page-item');
            const prevLink = document.createElement('a');
            prevLink.classList.add('page-link');
            prevLink.href = '#';
            prevLink.textContent = 'Previous';
            prevLi.appendChild(prevLink);
            pagination.appendChild(prevLi);

            prevLink.addEventListener('click', () => {
                currentPage--;
                displayData(currentPage);
                generatePagination();
            });
        }

        // Add first page link
        if (startPage > 1) {
            const firstLi = document.createElement('li');
            firstLi.classList.add('page-item');
            const firstLink = document.createElement('a');
            firstLink.classList.add('page-link');
            firstLink.href = '#';
            firstLink.textContent = '1';
            firstLi.appendChild(firstLink);
            pagination.appendChild(firstLi);

            firstLink.addEventListener('click', () => {
                currentPage = 1;
                displayData(currentPage);
                generatePagination();
            });

            // Add ellipsis if the gap between the first page and the startPage is more than 1
            if (startPage - 1 > 1) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.classList.add('page-item');
                const ellipsisLink = document.createElement('a');
                ellipsisLink.classList.add('page-link');
                ellipsisLink.href = '#';
                ellipsisLink.textContent = '...';
                ellipsisLi.appendChild(ellipsisLink);
                pagination.appendChild(ellipsisLi);
            }
        }

        // Add page links with numbered ellipsis
        for (let i = startPage; i <= endPage; i++) {
            const li = document.createElement('li');
            li.classList.add('page-item');
            const a = document.createElement('a');
            a.classList.add('page-link');
            a.href = '#';
            a.textContent = i;
            li.appendChild(a);
            pagination.appendChild(li);

            a.addEventListener('click', () => {
                currentPage = i;
                displayData(currentPage);
                generatePagination();
            });
        }

        // Add last page link
        if (endPage < totalPages) {
            // Add ellipsis if the gap between the endPage and the last page is more than 1
            if (totalPages - endPage > 1) {
                const ellipsisLi = document.createElement('li');
                ellipsisLi.classList.add('page-item');
                const ellipsisLink = document.createElement('a');
                ellipsisLink.classList.add('page-link');
                ellipsisLink.href = '#';
                ellipsisLink.textContent = '...';
                ellipsisLi.appendChild(ellipsisLink);
                pagination.appendChild(ellipsisLi);
            }

            const lastLi = document.createElement('li');
            lastLi.classList.add('page-item');
            const lastLink = document.createElement('a');
            lastLink.classList.add('page-link');
            lastLink.href = '#';
            lastLink.textContent = totalPages;
            lastLi.appendChild(lastLink);
            pagination.appendChild(lastLi);

            lastLink.addEventListener('click', () => {
                currentPage = totalPages;
                displayData(currentPage);
                generatePagination();
            });
        }

        // Add "Next" button
        if (currentPage < totalPages) {
            const nextLi = document.createElement('li');
            nextLi.classList.add('page-item');
            const nextLink = document.createElement('a');
            nextLink.classList.add('page-link');
            nextLink.href = '#';
            nextLink.textContent = 'Next';
            nextLi.appendChild(nextLink);
            pagination.appendChild(nextLi);

            nextLink.addEventListener('click', () => {
                currentPage++;
                displayData(currentPage);
                generatePagination();
            });
        }
    }

    // Initial display
    displayData(currentPage);
    generatePagination();
</script>